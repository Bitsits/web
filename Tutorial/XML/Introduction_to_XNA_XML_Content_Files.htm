<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><link media="all" href="Introduction_to_XNA_XML_Content_Files_files/widget45.css" type="text/css" rel="stylesheet">














  
    

  <script type="text/javascript">
//<![CDATA[
document.domain = 'assembla.com';
//]]>
</script>


    <title>Introduction to XNA XML Content Files | Zacharus Engine Space | Assembla</title>

    <link href="Introduction_to_XNA_XML_Content_Files_files/base_app_and_alerts_packaged.css" media="all" rel="stylesheet" type="text/css">
    
  
  
      
    <style type="text/css" media="all" rel="stylesheet">
      
      
    </style>
    

    
    <link href="Introduction_to_XNA_XML_Content_Files_files/print.css" media="print" rel="stylesheet" type="text/css">

    
    
    <script src="Introduction_to_XNA_XML_Content_Files_files/base_packaged.js" type="text/javascript"></script>
    <script src="Introduction_to_XNA_XML_Content_Files_files/drag-drop-folder-tree.js" type="text/javascript"></script>
    
  
  
  <script type="text/javascript">
//<![CDATA[
if(!helpControl){var helpControl = {};}
//]]>
</script>
  <script type="text/javascript">
//<![CDATA[
helpControl._wikiID = 'wiki_show';
//]]>
</script>


    
  
  
  


    <!-- prevents swf file caching -->
    <meta http-equiv="PRAGMA" content="NO-CACHE">
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    

  <script src="Introduction_to_XNA_XML_Content_Files_files/ga.js" type="text/javascript"></script></head><body><div id="_atssh" style="visibility: hidden; height: 1px; width: 1px; position: absolute; z-index: 100000;"><iframe src="Introduction_to_XNA_XML_Content_Files_files/sh24.htm" style="border: 0pt none ; height: 1px; width: 1px; position: absolute; z-index: 100000; left: 0pt; top: 0pt;" id="_atssh732"></iframe></div>
    
  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-2641193-1']);
    _gaq.push(['_setCustomVar',1,'Logged','false',1]);
    
    _gaq.push(['_trackPageview']);

    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
    })();
  </script>



    <div class="hidden">
      <a href="#content">Skip to contents</a>
    </div>

    

        <div id="header-w">

      
      <div id="help-panel">
        <div id="help-content"></div>
      </div>
      

      <div id="header" class="_">
        
          <div id="logo">
            <a href="http://www.assembla.com/">
              <img src="Introduction_to_XNA_XML_Content_Files_files/assembla-logo-small.gif" alt="Go to Assembla" title="Go to Assembla" width="90" height="30">
            </a>
          </div>
        

        <div id="header-links">
          <div id="user-box">
            
  
    
      <a href="http://www.assembla.com/features/compare" class="try-assembla">Try Assembla</a>
    
    <span>|</span>
  
  <a href="http://www.assembla.com/user/login">Login</a>

          </div>

          <form action="/spaces/Zacharus/search" id="search-form" method="get"><input class="main-search" id="q" name="q" onfocus="this.value == 'Search this space' ? this.value = '' : true" size="15" value="Search this space" type="text">
</form>

          
          
            <div id="show-help">
              <a class="closed" href="#" id="lfshow_help" onclick="helpControl.showHelp(); return false;">Help</a>
              <img alt="Help" id="lfloading" src="Introduction_to_XNA_XML_Content_Files_files/dots.gif" style="display: none;">
            </div>
          
          
        </div>

        <!-- clear float, the old skool way -->
        <div class="cut">&nbsp;</div>
        
          
            
            <div class="cut">&nbsp;</div>
          
        

        
          
            <h1 class="header-w clear-float">
              <span>Zacharus Engine</span>
              <span id="space-role">Free/Public Space</span>
            </h1>
          
        

      </div><!-- /header -->
    </div><!-- /header-w -->

    

  
    <div id="main-menu-w">
      <ul class="clear-float" id="main-menu"><li class="current"><a href="http://www.assembla.com/wiki/show/dSkoGmV-mr3A63ab7jnrAJ">Wiki</a></li><li class=""><a href="http://www.assembla.com/spaces/Zacharus/tickets">Tickets</a></li><li class=""><a href="http://www.assembla.com/spaces/Zacharus/milestones">Milestones</a></li><li class=""><a href="http://www.assembla.com/code/Zacharus/subversion/nodes">Source/SVN</a></li><li class=""><a href="http://www.assembla.com/spaces/Zacharus/team">Team</a></li><li class=""><a href="http://www.assembla.com/spaces/Zacharus/stream">Stream</a></li><li class=""><a href="http://www.assembla.com/flows/flow/dSkoGmV-mr3A63ab7jnrAJ">Messages</a></li><li class=""><a href="http://www.assembla.com/spaces/Zacharus/documents">Files</a></li><li class=""><a href="http://www.assembla.com/spaces/Zacharus/chat_tool">Chat</a></li><li class=""><a href="http://www.assembla.com/spaces/scrum/index/dSkoGmV-mr3A63ab7jnrAJ">StandUp</a></li></ul>
    </div><!-- /main-menu-w -->
  

  
    <!--[if IE 7]>
            <link href="/stylesheets/top-bar-ie7.css" media="screen" rel="stylesheet" type="text/css" />
            <link href="/stylesheets/wiki_content_space-ie7.css" media="screen" rel="stylesheet" type="text/css" />
          <![endif]-->
  

    
      <script type="text/javascript">
      if(!Breakout){var Breakout = {};}
      Breakout.space_wiki_name = "Zacharus";
    </script>
  

    <div id="content" class="wiki-tool">
      <script type="text/javascript">
//<![CDATA[
hideFlashNotice();
//]]>
</script>
      
        <link href="Introduction_to_XNA_XML_Content_Files_files/marketing-ads.css" media="screen" rel="stylesheet" type="text/css">

  <div class="mkt-ad-top">
    <div class="img-button-top">
      <a href="http://www.assembla.com/plans?pshdrad=2"><img alt="Hdr-ad-button-2" src="Introduction_to_XNA_XML_Content_Files_files/hdr-ad-button-2.png"></a>
    </div>
    <h2><span>Zacharus Engine</span> is an open source project powered by Assembla</h2>
    <p>
      <strong>Assembla</strong> offers secure, commercial-quality
      <a href="http://www.assembla.com/features/subversion?pshdrad=2">Hosted SVN</a>
      and
      <a href="http://www.assembla.com/features/git?pshdrad=2">GIT Repositories</a>,
      <a href="http://www.assembla.com/features/bug-tracking?pshdrad=2">Ticketing &amp; Bug Tracking</a>,
      and
      <a href="http://www.assembla.com/features/collaboration?pshdrad=2">Wikis</a>.
    </p>
    <p><strong>Host your community projects for free or try our subscription plans free for 30 days.</strong></p>
  </div><!-- /mkt-ad-top -->


      
      <div class="wiki-tool-wrap">
<div id="wiki-left-sidebar">

<div class="wiki-controls">
<div class="new-page-button">

<p class="compact-icon-button add-icon">
      

</p>
      
</div>


<div class="control-buttons">
<p class="compact-icon-button">
    
</p>
</div>

</div><!-- /wiki-controls -->

  <div id="wiki-pages-list"><!--wiki-pages-list has the left side bar of new layout-->
    
    <script src="Introduction_to_XNA_XML_Content_Files_files/wiki.js" type="text/javascript"></script>
<h2>Navigate Pages</h2>
  <ul id="wiki-page-list">
    <li id="dSkt_WV-mr3A63ab7jnrAJ" nodrag="true"><a href="http://www.assembla.com/wiki/show/Zacharus/dSkoGmV-mr3A63ab7jnrAJ">Home</a></li>
<li id="ctcX_8Xxmr3y6pab7jnrAJ" nodrag="true"><a href="http://www.assembla.com/wiki/show/Zacharus/Advanced_Object-Loading_through_XML_and_Reflection">Advanced Object-Loading through XML and Reflection</a></li>
<li id="aP95ocWg8r3A63ab7jnrAJ" nodrag="true"><a href="http://www.assembla.com/wiki/show/Zacharus/Implementing_a_Flexible_Input_System">Implementing a Flexible Input System</a></li>
<li id="b80NO2Xxqr3ztFab7jnrAJ" nodrag="true"><a href="http://www.assembla.com/wiki/show/Zacharus/Introduction_to_XNA_XML_Content_Files">Introduction to XNA XML Content Files</a></li>
<li id="avGcNEWier3A3rab7jnrAJ" nodrag="true"><a href="http://www.assembla.com/wiki/show/Zacharus/Paginas_Con_Muchisima_info">Paginas Con Muchisima info</a></li>
<li id="a7nl6gWg8r3Bjnab7jnrAJ" nodrag="true"><a href="http://www.assembla.com/wiki/show/Zacharus/Simple_Image_Template">Simple Image Template</a></li>
<li id="cp7pcGWhar3zNvab7jnrAJ" nodrag="true"><a href="http://www.assembla.com/wiki/show/Zacharus/Xml_Interface">Xml Interface</a></li>
<li id="cVJ-zsWg8r3Bjnab7jnrAJ" nodrag="true"><a href="http://www.assembla.com/wiki/show/Zacharus/XNA_Game_Engine_Tutorial_cap_2">XNA Game Engine Tutorial cap 2</a></li>
<li id="bWC5icWg8r3A4-ab7jnrAJ" nodrag="true"><a href="http://www.assembla.com/wiki/show/Zacharus/XNA_Game_Engine_Tutorial_Component_and_GameScreen">XNA Game Engine Tutorial Component and GameScreen</a></li>
<li id="dpJ1RsWg8r3BB0ab7jnrAJ" nodrag="true"><a href="http://www.assembla.com/wiki/show/Zacharus/XNA_Game_Engine_Tutorial_Series_3">XNA Game Engine Tutorial Series 3</a></li>
<li id="dKtaLCWg8r3A4-ab7jnrAJ" nodrag="true"><a href="http://www.assembla.com/wiki/show/Zacharus/XNA_Game_Engine_Tutorial_Series_4_-_DrawOrder">XNA Game Engine Tutorial Series 4 - DrawOrder</a></li>
<li id="d7Kj_2Wg8r3Bw6ab7jnrAJ" nodrag="true" class="current"><a href="http://www.assembla.com/wiki/show/Zacharus/XNA_Game_Engine_Tutorial_Series_5_-_Physics" class="current">XNA Game Engine Tutorial Series 5 - Physics</a></li>
<li id="bkqAUqWhar3Bjnab7jnrAJ" nodrag="true"><a href="http://www.assembla.com/wiki/show/Zacharus/XNA_Game_Engine_Tutorial_Series_5y5">XNA Game Engine Tutorial Series 5y5</a></li>
<li id="bCqZsaWhar3A4-ab7jnrAJ" nodrag="true"><a href="http://www.assembla.com/wiki/show/Zacharus/XNA_Game_Engine_Tutorial_Series_6_-_Input">XNA Game Engine Tutorial Series 6 - Input</a></li>

  </ul>

<script type="text/javascript">
//<![CDATA[
initNavigationWikiTree('b80NO2Xxqr3ztFab7jnrAJ');
//]]>
</script>


  </div><!-- /wiki-pages-list -->

</div>



<div class="wiki-content-col">
  <div class="wiki-top-wrap">
    <ul id="wiki-view-menu">
  <li class="current"> <a href="http://www.assembla.com/wiki/show/Zacharus/Introduction_to_XNA_XML_Content_Files">View</a> </li>
  

  <li class="pagehistory">
    <a href="http://www.assembla.com/wiki/history/Zacharus/Introduction_to_XNA_XML_Content_Files">Page History</a>
  </li>

  <li class="">
    <a href="http://www.assembla.com/wiki/comments/Zacharus/Introduction_to_XNA_XML_Content_Files">Comments </a>
  </li>
</ul>

    <p class="wiki-version"><!-- show wiki versio info-->
      
        Version 1, last updated by <a href="http://www.assembla.com/profile/ZeroK" tabindex="-1" target="_blank" title="Show Profile">ZeroK</a> at Dec 08 23:06 2008 UTC
      
    </p><!--p wiki-version-->
  </div>
  
  
  <div id="wiki-content-body">
    <div id="wiki-page-title-wrap">
      <div class="wiki-page-actions">
        
          <p><a href="http://www.assembla.com/wiki/print/Zacharus/Introduction_to_XNA_XML_Content_Files" class="tooltip" onclick="window.open(this.href);return false;"><img alt="Print this page" src="Introduction_to_XNA_XML_Content_Files_files/ico_print.gif" width="16" height="16"><span style="width: 80px; left: -68px;">Print this page</span></a></p>
          
            
          
        
      </div>
      <h2>
        Introduction to XNA XML Content Files
        
      </h2>
    </div>

          <h2 id="3c7370616e207374796c653d22666f6e742d73697a653a20782d736d616c6c3b223e696e74726f64756374696f6e20746f20786e6120786d6c20636f6e74656e742066696c657320696e20786e612067616d652073747564696f20322e303c2f7370616e3e"><span style="font-size: x-small;">Introduction to XNA XML Content Files in XNA Game Studio 2.0</span></h2>
<span style="font-size: x-small;"><br> By <a href="http://nick.gravelyn.com/code">Nick Gravelyn</a></span>
<p><span style="font-size: x-small;"><br> <br> <br> One nice feature of
the XNA Content Pipeline is it’s built in XML content abilities. Though
nothing that couldn’t have been done manually, the Content Pipeline
exposes this functionality in a way that makes it seem like a great
choice for loading in content for your game.<br> <br> Here’s an example
to get your mind going. In your game class’s Initialize method you are
creating a large array of sprites. You create a few hundred or so, set
positions, assign textures, the whole nine yards. Now say you hire a
designer who is going to help you with the game, including laying out
these sprites. Now you could teach the designer enough C# to fumble his
way through the code, but why do that? You could move all of that code
out to XML content and have it loaded in one line of C# code. Not only
does this allow your designers to edit an easier file format, but it
simplifies and shortens your C# code.<br> <br> Let’s jump right in
then! First create a new Windows Game Project. First we will
demonstrate a very basic use of the XML content files. First add a <a class="wiki_link" title="SpriteFont" href="http://www.assembla.com/wiki/show/Zacharus/SpriteFont">SpriteFont</a> object and string object to your class:<br> </span></p>
<pre><div style="border-style: solid; border-width: 1px; background-color: white;"><pre><span style="font-size: x-small;"><span style="font-family: courier new; font-size: x-small;"> <br>SpriteFont font;<br><span style="color: rgb(0, 0, 255);">string</span> firstXmlContent;<br><br></span></span></pre>
</div>
</pre>
<p><span style="font-size: x-small;"><br> <br> Next we need to add a <a class="wiki_link" title="SpriteFont" href="http://www.assembla.com/wiki/show/Zacharus/SpriteFont">SpriteFont</a> to our Content project. Create a new <a class="wiki_link" title="SpriteFont" href="http://www.assembla.com/wiki/show/Zacharus/SpriteFont">SpriteFont</a> and name it ‘Arial.spritefont’. Next add a new XML file to our Content project called ‘<a class="wiki_link" title="FirstXmlContent" href="http://www.assembla.com/wiki/show/Zacharus/FirstXmlContent">FirstXmlContent</a>.xml’. When created, you’ll see the following:<br> </span></p>
<pre><div style="border-style: solid; border-width: 1px; background-color: white;"><pre><span style="font-size: x-small;"><span style="font-family: courier new; font-size: x-small;"><br>&lt;?xml version=<span style="color: rgb(163, 21, 21);">"1.0"</span> encoding=<span style="color: rgb(163, 21, 21);">"utf-8"</span> ?&gt;<br>&lt;XnaContent&gt;<br>  &lt;!-- TODO: replace <span style="color: rgb(0, 0, 255);">this</span> Asset with your own XML asset data. --&gt;<br>  &lt;Asset Type=<span style="color: rgb(163, 21, 21);">"System.String"</span>&gt;&lt;Asset&gt;<br>&lt;/XnaContent&gt;<br><br></span></span></pre>
</div>
</pre>
<p><span style="font-size: x-small;"><br> <br> So what does that mean? The first line simply tells us what version of XML we are using. Next we have the <a class="wiki_link" title="XnaContent" href="http://www.assembla.com/wiki/show/Zacharus/XnaContent">XnaContent</a>
tag. This is the required top-level tag for any XNA content files.
Inside we have an Asset tag with a Type attribute. The Asset tag is how
we declare any assets we want to create. The Type attribute tells the
Content Pipeline which type we want to use. The default is a string
object. So for our example, go ahead and put some text inside those
asset tags. Here’s my finished file:<br> </span></p>
<pre><div style="border-style: solid; border-width: 1px; background-color: white;"><pre><span style="font-size: x-small;"><span style="font-family: courier new; font-size: x-small;"><br>&lt;?xml version=<span style="color: rgb(163, 21, 21);">"1.0"</span> encoding=<span style="color: rgb(163, 21, 21);">"utf-8"</span> ?&gt;<br>&lt;XnaContent&gt;<br>  &lt;!-- TODO: replace <span style="color: rgb(0, 0, 255);">this</span> Asset with your own XML asset data. --&gt;<br>  &lt;Asset Type=<span style="color: rgb(163, 21, 21);">"System.String"</span>&gt;This <span style="color: rgb(0, 0, 255);">is</span> our first XML content!&lt;/Asset&gt;<br>&lt;/XnaContent&gt;<br><br></span></span></pre>
</div>
</pre>
<p><span style="font-size: x-small;"><br> <br> Now let’s head back into our code. Head to the <a class="wiki_link" title="LoadContent" href="http://www.assembla.com/wiki/show/Zacharus/LoadContent">LoadContent</a> method and add the following two lines:<br> </span></p>
<pre><div style="border-style: solid; border-width: 1px; background-color: white;"><pre><span style="font-size: x-small;"><span style="font-family: courier new; font-size: x-small;"><br>font = Content.Load&lt;SpriteFont&gt;(@<span style="color: rgb(163, 21, 21);">"Arial"</span>);<br>firstXmlContent = Content.Load&lt;<span style="color: rgb(0, 0, 255);">string</span>&gt;(@<span style="color: rgb(163, 21, 21);">"FirstXmlContent"</span>);<br><br></span></span></pre>
</div>
</pre>
<p><span style="font-size: x-small;"><br> <br> Now we have successfully
loaded our sprite and the string from our XML file. Now let’s display
the string so we can verify it is correct. Move down to the Draw method
and add the following code:<br> </span></p>
<pre><div style="border-style: solid; border-width: 1px; background-color: white;"><pre><span style="font-size: x-small;"><span style="font-family: courier new; font-size: x-small;"> <br>spriteBatch.Begin(SpriteBlendMode.AlphaBlend);<br>spriteBatch.DrawString(<br>   font, <br>   firstXmlContent, <br>   <span style="color: rgb(0, 0, 255);">new</span> Vector2(20f), <br>   Color.White);<br>spriteBatch.End();<br><br></span></span></pre>
</div>
</pre>
<p><span style="font-size: x-small;"><br> <br> Now run the program.
Your text should show up drawn on the screen. You have now created the
most basic of XML content files. Let’s move on to a more real-world
type example. For this we will need two more projects.<br> <br> First add a Content Pipeline Extension Project to our solution. I’m going to call mine ‘<a class="wiki_link" title="XmlContentSampleExtension" href="http://www.assembla.com/wiki/show/Zacharus/XmlContentSampleExtension">XmlContentSampleExtension</a>’, but you can use any name. This project will hold our <a class="wiki_link" title="ContentTypeWriter" href="http://www.assembla.com/wiki/show/Zacharus/ContentTypeWriter">ContentTypeWriter</a>, a class that will tell the Content Pipeline how we want to store our class’s information.<br> <br> Next create a Windows Library project. I’ll call mine ‘<a class="wiki_link" title="XmlContentSampleShared" href="http://www.assembla.com/wiki/show/Zacharus/XmlContentSampleShared">XmlContentSampleShared</a>’.
You can use any name, but this will affect the namespace which will
require changes later. This is where we will be putting our Sprite
class and <a class="wiki_link" title="ContentTypeReader" href="http://www.assembla.com/wiki/show/Zacharus/ContentTypeReader">ContentTypeReader</a>,
a class that will read in our class at runtime. The reason for this
project is because we are going to need access to the Sprite in both
our main game project as well as the extension project.<br> <br> Let’s
first make sure we hook everything up correctly. First right click on
our game project and select Add Reference. Click the Projects tab and
select the library project. Click ok. Next right click on the Content
subproject and select Add Reference. Click the Projects tab and select
the extension project. Next right click on the extension project and
select Add Reference. Click the projects tab and select the library
project. Slightly confusing process, but now everything is perfectly
hooked up for us to use.<br> <br> Now let’s work on the Sprite class.
Delete the Class1.cs file from your library class and create a new
Sprite.cs class file. For the sake of brevity, I will not explain this
code here. It is fairly simple sprite drawing code:<br> </span></p>
<pre><div style="border-style: solid; border-width: 1px; background-color: white;"><pre><span style="font-size: x-small;"><span style="font-family: courier new; font-size: x-small;"><br><span style="color: rgb(0, 0, 255);">public</span> <span style="color: rgb(0, 0, 255);">class</span> Sprite<br>{<br>    Vector2 position;<br>    <span style="color: rgb(0, 0, 255);">float</span> rotation;<br>    Vector2 scale;<br><br>    <span style="color: rgb(0, 0, 255);">string</span> textureAsset;<br>    Texture2D <span style="color: rgb(0, 0, 255);">texture</span>;<br><br>    <span style="color: rgb(0, 0, 255);">public</span> Vector2 Position<br>    {<br>        get { <span style="color: rgb(0, 0, 255);">return</span> position; }<br>        set { position = value; }<br>    }<br><br>    <span style="color: rgb(0, 0, 255);">public</span> <span style="color: rgb(0, 0, 255);">float</span> Rotation<br>    {<br>        get { <span style="color: rgb(0, 0, 255);">return</span> rotation; }<br>        set { rotation = value; }<br>    }<br><br>    <span style="color: rgb(0, 0, 255);">public</span> Vector2 Scale<br>    {<br>        get { <span style="color: rgb(0, 0, 255);">return</span> scale; }<br>        set { scale = value; }<br>    }<br><br>    <span style="color: rgb(0, 0, 255);">public</span> <span style="color: rgb(0, 0, 255);">string</span> TextureAsset<br>    {<br>        get { <span style="color: rgb(0, 0, 255);">return</span> textureAsset; }<br>        set { textureAsset = value; }<br>    }<br><br>    [ContentSerializerIgnore]<br>    <span style="color: rgb(0, 0, 255);">public</span> Texture2D Texture<br>    {<br>        get { <span style="color: rgb(0, 0, 255);">return</span> <span style="color: rgb(0, 0, 255);">texture</span>; }<br>    }<br><br>    <span style="color: rgb(0, 0, 255);">public</span> <span style="color: rgb(0, 0, 255);">void</span> Load(ContentManager content)<br>    {<br>        <span style="color: rgb(0, 0, 255);">texture</span> = content.Load&lt;Texture2D&gt;(textureAsset);<br>    }<br><br>    <span style="color: rgb(0, 0, 255);">public</span> <span style="color: rgb(0, 0, 255);">void</span> Draw(SpriteBatch batch)<br>    {<br>        batch.Draw(<br>            <span style="color: rgb(0, 0, 255);">texture</span>, <br>            position, <br>            <span style="color: rgb(0, 0, 255);">null</span>,<br>            Color.White, <br>            rotation, <br>            Vector2.Zero,<br>            scale,<br>            SpriteEffects.None, <br>            0f);<br>        }<br>    }<br><br></span></span></pre>
</div>
</pre>
<p><span style="font-size: x-small;"><br> <br> The one thing of note is the [<a class="wiki_link" title="ContentSerializerIgnore" href="http://www.assembla.com/wiki/show/Zacharus/ContentSerializerIgnore">ContentSerializerIgnore</a>]
attribute on our Texture property. Attributes are meta-data applied to
properties, variables, methods, or classes that give our program more
idea of what things are for. The <a class="wiki_link" title="ContentSerializerIgnore" href="http://www.assembla.com/wiki/show/Zacharus/ContentSerializerIgnore">ContentSerializerIgnore</a> attribute simply tells our program that we don’t want to save the texture when the class is serialized.<br> <br> Next we’ll go ahead and create our <a class="wiki_link" title="ContentTypeReader" href="http://www.assembla.com/wiki/show/Zacharus/ContentTypeReader">ContentTypeReader</a>. I usually place <a class="wiki_link" title="ContentTypeReaders" href="http://www.assembla.com/wiki/show/Zacharus/ContentTypeReaders">ContentTypeReaders</a> in the same file as the class they are reading, but that is up to you. Here’s the full code for our reader:<br> </span></p>
<pre><div style="border-style: solid; border-width: 1px; background-color: white;"><pre><span style="font-size: x-small;"><span style="font-family: courier new; font-size: x-small;"><br><span style="color: rgb(0, 0, 255);">public</span> <span style="color: rgb(0, 0, 255);">class</span> SpriteContentReader : ContentTypeReader&lt;Sprite&gt;<br>{<br>    <span style="color: rgb(0, 0, 255);">protected</span> <span style="color: rgb(0, 0, 255);">override</span> Sprite Read(<br>            ContentReader input, <br>            Sprite existingInstance)<br>    {<br>        Sprite sprite = <span style="color: rgb(0, 0, 255);">new</span> Sprite();<br><br>        sprite.Position = input.ReadVector2();<br>        sprite.Rotation = input.ReadSingle();<br>        sprite.Scale = input.ReadVector2();<br>        sprite.TextureAsset = input.ReadString();<br><br>        sprite.Load(input.ContentManager);<br><br>        <span style="color: rgb(0, 0, 255);">return</span> sprite;<br>    }<br>}<br><br></span></span></pre>
</div>
</pre>
<p><span style="font-size: x-small;"><br> <br> Our class derives the <a class="wiki_link" title="ContentTypeReader" href="http://www.assembla.com/wiki/show/Zacharus/ContentTypeReader">ContentTypeReader</a>
generic type giving it the type we want to load in. Then we have to
implement the Read method. This is the method that will read in our
data from the binary file. So we create a new Sprite, read in some
data, and store it in the Sprite. Then we call our sprite’s load method
with the current <a class="wiki_link" title="ContentManager" href="http://www.assembla.com/wiki/show/Zacharus/ContentManager">ContentManager</a> to load the texture. Finally we return the sprite to the user.<br> <br>
The order in which we read in the data is semi-important. While we can
read/write the data in any order, we have to make sure that they both
are doing it in the same order. So you could have your reader/writer
pair put the <a class="wiki_link" title="TextureAsset" href="http://www.assembla.com/wiki/show/Zacharus/TextureAsset">TextureAsset</a> first as long as they both do it that way.<br> <br> Now we are done with our library class. Let’s go ahead then and make our <a class="wiki_link" title="ContentTypeWriter" href="http://www.assembla.com/wiki/show/Zacharus/ContentTypeWriter">ContentTypeWriter</a> class. Delete the default <a class="wiki_link" title="ContentProcessor" href="http://www.assembla.com/wiki/show/Zacharus/ContentProcessor">ContentProcessor</a> file in the extension library. Next right click and select Add New on the extension project. Find the <a class="wiki_link" title="ContentTypeWriter" href="http://www.assembla.com/wiki/show/Zacharus/ContentTypeWriter">ContentTypeWriter</a> template and select OK.<br> <br>
We’re going to make some changes here. The default template uses some
aliasing for the input class that we don’t want. So first let’s erase
the class in there and replace it with this one:<br> </span></p>
<pre><div style="border-style: solid; border-width: 1px; background-color: white;"><pre><span style="font-size: x-small;"><span style="font-family: courier new; font-size: x-small;"><br>[ContentTypeWriter]<br><span style="color: rgb(0, 0, 255);">public</span> <span style="color: rgb(0, 0, 255);">class</span> SpriteContentWriter : ContentTypeWriter&lt;Sprite&gt;<br>{<br>    <span style="color: rgb(0, 0, 255);">protected</span> <span style="color: rgb(0, 0, 255);">override</span> <span style="color: rgb(0, 0, 255);">void</span> Write(<br>            ContentWriter output, <br>            Sprite value)<br>    {<br>        output.Write(value.Position);<br>        output.Write(value.Rotation);<br>        output.Write(value.Scale);<br>        output.Write(value.TextureAsset);<br>    }<br><br>    <span style="color: rgb(0, 0, 255);">public</span> <span style="color: rgb(0, 0, 255);">override</span> <span style="color: rgb(0, 0, 255);">string</span> GetRuntimeReader(<br>            TargetPlatform targetPlatform)<br>    {<br>        <span style="color: rgb(0, 0, 255);">return</span> <span style="color: rgb(0, 0, 255);">typeof</span>(SpriteContentReader).AssemblyQualifiedName;<br>    }<br>}<br><br></span></span></pre>
</div>
</pre>
<p><span style="font-size: x-small;"><br> <br> You’ll see our class overrides two methods: the Write method and the <a class="wiki_link" title="GetRuntimeReader" href="http://www.assembla.com/wiki/show/Zacharus/GetRuntimeReader">GetRuntimeReader</a> method. The write method is where we write our data out. You’ll see simply call the Write method of the <a class="wiki_link" title="ContentWriter" href="http://www.assembla.com/wiki/show/Zacharus/ContentWriter">ContentWriter</a> and give it our data. Again, this is the same order as our reader reads it in.<br> <br> Our <a class="wiki_link" title="GetRuntimeReader" href="http://www.assembla.com/wiki/show/Zacharus/GetRuntimeReader">GetRuntimeReader</a> method returns the full name of the class that will be reading in our sprites. For this we use the typeof function to get the <a class="wiki_link" title="SpriteContentReader" href="http://www.assembla.com/wiki/show/Zacharus/SpriteContentReader">SpriteContentReader</a> type and then return its <a class="wiki_link" title="AssemblyQualifiedName" href="http://www.assembla.com/wiki/show/Zacharus/AssemblyQualifiedName">AssemblyQualifiedName</a>.<br> <br>
Of course for this to work, make sure you add a using statement to the
top of the file with your library’s namespace. Mine was ‘using <a class="wiki_link" title="XmlContentSampleShared" href="http://www.assembla.com/wiki/show/Zacharus/XmlContentSampleShared">XmlContentSampleShared</a>;’ since that is what my library is called, but yours will vary based on the name of your project.<br> <br>
So now you are probably thinking “gee, this is great and all, but
where’s that good old XNA magic?” Take a look at the declaration of the
Write method. You’ll see that we are being passed a Sprite object. So
where does this object come from? That’s the magic. The content
pipeline will take our XML file, instantiate a new sprite, fill in its
data, and then pass that sprite to our Writer which will write out the
.xnb file. There is magic behind the scenes. We just had to write up a
little bit of glue to get from the loaded sprite to the .xnb file.<br> <br>
Now we are all set! Let’s go ahead and create that content. First we’ll
need a texture to draw. I used a simple crate image as below, but you
can use any image you would like:<br> <br> </span></p>
<span style="font-size: x-small;"><a href="http://www.ziggyware.com/ziggywareimages/gravelyn/crate.png"><img src="Introduction_to_XNA_XML_Content_Files_files/crate_small.htm" border="0"></a></span>
<p><span style="font-size: x-small;"><br> <br> Add that texture to your Content project. Next add a new XML content file to your Content project. Mine is called ‘<a class="wiki_link" title="CrateSprite" href="http://www.assembla.com/wiki/show/Zacharus/CrateSprite">CrateSprite</a>.xml’. Here we will create our custom XML content. This is what that looks like:<br> </span></p>
<pre><div style="border-style: solid; border-width: 1px; background-color: white;"><pre><span style="font-size: x-small;"><span style="font-family: courier new; font-size: x-small;"><br>&lt;?xml version=<span style="color: rgb(163, 21, 21);">"1.0"</span> encoding=<span style="color: rgb(163, 21, 21);">"utf-8"</span> ?&gt;<br>&lt;XnaContent&gt;<br>  &lt;Asset Type=<span style="color: rgb(163, 21, 21);">"XmlContentSampleShared.Sprite"</span>&gt;<br>        &lt;Position&gt;100 100&lt;/Position&gt;<br>        &lt;Rotation&gt;0&lt;/Rotation&gt;<br>        &lt;Scale&gt;.5 .5&lt;/Scale&gt;<br>        &lt;TextureAsset&gt;crate&lt;/TextureAsset&gt;<br>  &lt;/Asset&gt;<br>&lt;/XnaContent&gt;<br><br></span></span></pre>
</div>
</pre>
<p><span style="font-size: x-small;"><br> <br> You see we use the
property names from the Sprite class as the inner tags to the Asset
tag. Again, make sure you have the correct namespace in your Type
attribute.<br> <br> So we give our sprite an initial position,
rotation, and scale, as well as the asset name for our texture. Mine
was called ‘crate’ but yours might be different if you used a different
texture.<br> <br> Now let’s jump back to the game class. Make sure you
add a ‘using’ statement to the file for your library project. Mine
again is ‘using <a class="wiki_link" title="XmlContentSampleShared" href="http://www.assembla.com/wiki/show/Zacharus/XmlContentSampleShared">XmlContentSampleShared</a>;’, but yours will vary based on your project’s namespace. Now let’s add a new Sprite object to our class:<br> </span></p>
<pre><div style="border-style: solid; border-width: 1px; background-color: white;"><pre><span style="font-size: x-small;"><span style="font-family: courier new; font-size: x-small;"><br>Sprite sprite;<br><br></span></span></pre>
</div>
</pre>
<p><span style="font-size: x-small;"><br> <br> Next let’s head to the <a class="wiki_link" title="LoadContent" href="http://www.assembla.com/wiki/show/Zacharus/LoadContent">LoadContent</a> method and load our sprite in:<br> <br> <br> sprite = Content.Load&lt;Sprite&gt;(@"<a class="wiki_link" title="CrateSprite" href="http://www.assembla.com/wiki/show/Zacharus/CrateSprite">CrateSprite</a>");<br> <br> <br> Now let’s head to the Draw method and render our sprite. Add the following code:<br> </span></p>
<pre><div style="border-style: solid; border-width: 1px; background-color: white;"><pre><span style="font-size: x-small;"><span style="font-family: courier new; font-size: x-small;"><br>spriteBatch.Begin();<br>sprite.Draw(spriteBatch);<br>spriteBatch.End();<br><br></span></span></pre>
</div>
</pre>
<p><span style="font-size: x-small;"><br> <br> Now when your run the
game, your sprite should render! We now have a simple data-driven way
to create sprites. But we can extend this a bit further even. Let’s
create an XML file that lets us load a whole list of sprites to draw.
This would be useful for something like a tile-base game. <br> <br>
First we’ll comment out all the Sprite code we just added to our game
class. This will make sure we don’t load or draw that single sprite XML
file. Next let’s make a new XML content file in our Content project
called ‘<a class="wiki_link" title="SpriteList" href="http://www.assembla.com/wiki/show/Zacharus/SpriteList">SpriteList</a>.xml’. Here we will create our list of sprites. This is what an XML list looks like:<br> </span></p>
<pre><div style="border-style: solid; border-width: 1px; background-color: white;"><pre><span style="font-size: x-small;"><span style="font-family: courier new; font-size: x-small;"><br>&lt;?xml version=<span style="color: rgb(163, 21, 21);">"1.0"</span> encoding=<span style="color: rgb(163, 21, 21);">"utf-8"</span> ?&gt;<br>&lt;XnaContent&gt;<br>  &lt;Asset Type=<span style="color: rgb(163, 21, 21);">"System.Collections.Generic.List[XmlContentSampleShared.Sprite]"</span>&gt;<br>        &lt;Item&gt;<br>            &lt;Position&gt;100 100&lt;/Position&gt;<br>            &lt;Rotation&gt;0&lt;/Rotation&gt;<br>            &lt;Scale&gt;.2 .2&lt;/Scale&gt;<br>            &lt;TextureAsset&gt;crate&lt;/TextureAsset&gt;<br>        &lt;/Item&gt;<br><br>        &lt;Item&gt;<br>            &lt;Position&gt;400 300&lt;/Position&gt;<br>            &lt;Rotation&gt;0&lt;/Rotation&gt;<br>            &lt;Scale&gt;.2 .2&lt;/Scale&gt;<br>            &lt;TextureAsset&gt;crate&lt;/TextureAsset&gt;<br>        &lt;/Item&gt;<br><br>        &lt;Item&gt;<br>            &lt;Position&gt;500 20&lt;/Position&gt;<br>            &lt;Rotation&gt;0&lt;/Rotation&gt;<br>            &lt;Scale&gt;.2 .2&lt;/Scale&gt;<br>            &lt;TextureAsset&gt;crate&lt;/TextureAsset&gt;<br>        &lt;/Item&gt;<br>  &lt;/Asset&gt;<br>&lt;/XnaContent&gt;<br><br></span></span></pre>
</div>
</pre>
<p><span style="font-size: x-small;"><br> <br> Most should look familiar. Our Type for the asset is now a System.Collections.Generic.List where we are using the <a class="wiki_link" title="XmlContentSampleShared" href="http://www.assembla.com/wiki/show/Zacharus/XmlContentSampleShared">XmlContentSampleShared</a>.Sprite
class. Next you’ll see we have lots of these new Item tags. Each of
these represent one of our Sprites. So inside of those tags you’ll see
the same type of data we had in our single sprite XML file.<br> <br> Now let’s get back to code. Add the following list to your game class:<br> </span></p>
<pre><div style="border-style: solid; border-width: 1px; background-color: white;"><pre><span style="font-size: x-small;"><span style="font-family: courier new; font-size: x-small;"><br>List&lt;Sprite&gt; sprites = <span style="color: rgb(0, 0, 255);">new</span> List&lt;Sprite&gt;();<br><br></span></span></pre>
</div>
</pre>
<p><span style="font-size: x-small;"><br> <br> And next add the following to your <a class="wiki_link" title="LoadContent" href="http://www.assembla.com/wiki/show/Zacharus/LoadContent">LoadContent</a> method to load it in:<br> </span></p>
<pre><div style="border-style: solid; border-width: 1px; background-color: white;"><pre><span style="font-size: x-small;"><span style="font-family: courier new; font-size: x-small;"><br>sprites = Content.Load&lt;List&lt;Sprite&gt;&gt;(@<span style="color: rgb(163, 21, 21);">"SpriteList"</span>);<br><br></span></span></pre>
</div>
</pre>
<p><span style="font-size: x-small;"><br> <br> And finally add the following to your Draw method to draw the sprites:<br> </span></p>
<pre><div style="border-style: solid; border-width: 1px; background-color: white;"><pre><span style="font-size: x-small;"><span style="font-family: courier new; font-size: x-small;"><br>spriteBatch.Begin();<br><span style="color: rgb(0, 0, 255);">foreach</span> (Sprite sprite <span style="color: rgb(0, 0, 255);">in</span> sprites)<br>    sprite.Draw(spriteBatch);<br>spriteBatch.End();<br><br></span></span></pre>
</div>
</pre>
<p><span style="font-size: x-small;"><br> <br> And now we have a single
XML file that gives us three drawn sprites. Now you can extend this to
all sorts of other classes. And when your designer wants to add in new
sprites, it’s as easy as modifying the XML. This also opens the door
for you to create a custom editor for your game. The editor could
simply save out these XML files which can easily be read in by the
content pipeline.<br> <br> You can download the complete source code with solutions for both Visual C# Express 2005 and Visual Studio Professional here: <a href="http://www.ziggyware.com/downloads.php?cat_id=4&amp;download_id=89"><strong>XmlContentSample.zip</strong></a>.<br></span></p>
    
  </div><!-- /wiki-content-body -->
</div>

<div class="cut"></div>
</div>

    </div><!-- /content -->

    
  


    <div id="footer-w">
  <div class="tutorial-and-bookmark">
          <div class="video-link" style="text-align: center;"><span id="hidden_content_23_features_popup_video" style="display: none;"></span><a href="#" onclick="new Ajax.Updater('hidden_content_23_features_popup_video', '/features/popup_video?video=23', {asynchronous:true, evalScripts:true, onComplete:function(request){RedBox.addHiddenContent('hidden_content_23_features_popup_video'); }, onLoading:function(request){RedBox.loading(); }}); return false;">Watch our tutorial video for the Wiki Tool</a></div>
    
    
      
        <!-- AddThis Button BEGIN -->
<div class="addthis_toolbox addthis_default_style" style="margin-right: 20px;">
  <a href="http://www.addthis.com/bookmark.php?v=250&amp;username=xa-4bb1fb7f05797876" class="addthis_button_compact at300m"><span class="at300bs at15t_compact"></span>Share</a>
  <span class="addthis_separator">|</span>
  <a title="Send to Facebook" target="_blank" href="http://www.addthis.com/bookmark.php?v=250&amp;winname=addthis&amp;pub=xa-4bb1fb7f05797876&amp;source=tbx-250&amp;lng=en-US&amp;s=facebook&amp;url=http%3A%2F%2Fwww.assembla.com%2Fwiki%2Fshow%2FZacharus%2FIntroduction_to_XNA_XML_Content_Files&amp;title=Introduction%20to%20XNA%20XML%20Content%20Files%20%7C%20Zacharus%20Engine%20Space%20%7C%20Assembla&amp;ate=AT-xa-4bb1fb7f05797876/-/-/4cb1dd640e44f189/1&amp;CXNID=2000001.5215456080540439074NXC&amp;pre=http%3A%2F%2Fwww.google.com%2Furl%3Fsa%3Dt%26source%3Dweb%26cd%3D10%26ved%3D0CDcQFjAJ%26url%3Dhttp%253A%252F%252Fwww.assembla.com%252Fwiki%252Fshow%252FZacharus%252FIntroduction_to_XNA_XML_Content_Files%26rct%3Dj%26q%3Dxnacontent%2520xml%26ei%3DqNqxTPnoEoXIvQP8vfW4Bg%26usg%3DAFQjCNHJSRAHBbUTvrWjugsSFLETuKDm7g%26cad%3Drja&amp;tt=0" class="addthis_button_facebook at300b"><span class="at300bs at15t_facebook"></span></a>
  <a title="Send to MySpace" target="_blank" href="http://www.addthis.com/bookmark.php?v=250&amp;winname=addthis&amp;pub=xa-4bb1fb7f05797876&amp;source=tbx-250&amp;lng=en-US&amp;s=myspace&amp;url=http%3A%2F%2Fwww.assembla.com%2Fwiki%2Fshow%2FZacharus%2FIntroduction_to_XNA_XML_Content_Files&amp;title=Introduction%20to%20XNA%20XML%20Content%20Files%20%7C%20Zacharus%20Engine%20Space%20%7C%20Assembla&amp;ate=AT-xa-4bb1fb7f05797876/-/-/4cb1dd640e44f189/2&amp;CXNID=2000001.5215456080540439074NXC&amp;pre=http%3A%2F%2Fwww.google.com%2Furl%3Fsa%3Dt%26source%3Dweb%26cd%3D10%26ved%3D0CDcQFjAJ%26url%3Dhttp%253A%252F%252Fwww.assembla.com%252Fwiki%252Fshow%252FZacharus%252FIntroduction_to_XNA_XML_Content_Files%26rct%3Dj%26q%3Dxnacontent%2520xml%26ei%3DqNqxTPnoEoXIvQP8vfW4Bg%26usg%3DAFQjCNHJSRAHBbUTvrWjugsSFLETuKDm7g%26cad%3Drja&amp;tt=0" class="addthis_button_myspace at300b"><span class="at300bs at15t_myspace"></span></a>
  <a title="Send to Google" target="_blank" href="http://www.addthis.com/bookmark.php?v=250&amp;winname=addthis&amp;pub=xa-4bb1fb7f05797876&amp;source=tbx-250&amp;lng=en-US&amp;s=google&amp;url=http%3A%2F%2Fwww.assembla.com%2Fwiki%2Fshow%2FZacharus%2FIntroduction_to_XNA_XML_Content_Files&amp;title=Introduction%20to%20XNA%20XML%20Content%20Files%20%7C%20Zacharus%20Engine%20Space%20%7C%20Assembla&amp;ate=AT-xa-4bb1fb7f05797876/-/-/4cb1dd640e44f189/3&amp;CXNID=2000001.5215456080540439074NXC&amp;pre=http%3A%2F%2Fwww.google.com%2Furl%3Fsa%3Dt%26source%3Dweb%26cd%3D10%26ved%3D0CDcQFjAJ%26url%3Dhttp%253A%252F%252Fwww.assembla.com%252Fwiki%252Fshow%252FZacharus%252FIntroduction_to_XNA_XML_Content_Files%26rct%3Dj%26q%3Dxnacontent%2520xml%26ei%3DqNqxTPnoEoXIvQP8vfW4Bg%26usg%3DAFQjCNHJSRAHBbUTvrWjugsSFLETuKDm7g%26cad%3Drja&amp;tt=0" class="addthis_button_google at300b"><span class="at300bs at15t_google"></span></a>
  <a title="Tweet This" target="_blank" class="addthis_button_twitter at300b"><span class="at300bs at15t_twitter"></span></a>
<div class="atclear"></div></div>
<script type="text/javascript">
//<![CDATA[
document.write(
  '<sc'+'ript src="http'+
  (document.location.protocol=='https:'?'s://':'://')+
  's7.addthis.com/js/250/addthis_widget.js#username=xa-4bb1fb7f05797876"></sc'+'ript>'
);
//]]>
</script><script src="Introduction_to_XNA_XML_Content_Files_files/addthis_widget.js"></script>
<!-- AddThis Button END -->
<div class="cut"></div>

      
    
  </div>
  

  <div id="footer">
    

    <p>
      <a href="http://www.assembla.com/">Home</a>
      / <a href="http://www.assembla.com/community">Community</a>
    
      / <a href="http://www.assembla.com/features">Tour</a>
      / <a href="http://www.assembla.com/catalog/1">Get a Space</a>
      &nbsp; - &nbsp; Solutions for <a href="http://www.assembla.com/features/bug-tracking">Bug &amp; Issue Tracking</a>, <a href="http://www.assembla.com/features/collaboration">Collaboration Tools</a>, <a href="http://offers.assembla.com/free-subversion-hosting">Free Subversion Hosting</a>, <a href="http://offers.assembla.com/free-git-hosting">Free GIT Hosting</a>

    
    </p>

    

    <p id="copyr-contact">
  Copyright © 2006-2010 by Assembla, LLC //  <b>Phone</b> 1-781-583-7541 / <b>E-mail</b>: <a href="mailto:support@assembla.com">support@assembla.com</a>
</p>

  </div><!-- /footer -->
</div><!-- /footer-w -->

    
  
  





  </body></html>